---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

🚀 1. 구현 작업 원칙
✅ SOLID 원칙 적용:

단일 책임 원칙 (SRP): 컴포넌트, 함수, 클래스는 하나의 책임만 수행하도록 구현

개방-폐쇄 원칙 (OCP): 기존 코드를 수정하지 않고 확장 가능하게 설계

리스코프 치환 원칙 (LSP): 상위 타입을 하위 타입으로 교체해도 문제없도록 설계

인터페이스 분리 원칙 (ISP): 클라이언트가 불필요한 메서드에 의존하지 않도록 인터페이스 분리

의존성 역전 원칙 (DIP): 고수준 모듈이 저수준 모듈에 의존하지 않도록 설계

✅ TDD 적용:

테스트 코드 → 로직 코드 → 리팩토링 순서로 작업

코드 수정 시 테스트 코드 먼저 수정

✅ Clean Architecture 적용:

관심사 분리 및 책임 명확화

UI → 비즈니스 로직 → 데이터 계층 분리

✅ 설정 설명:

Pulumi, CloudFormation 설정 설명은 영어로 작성

🏆 2. 코드 품질 원칙
✅ 단순성:

복잡한 로직보다 단순한 솔루션 우선

불필요한 if 문, 중첩 로직 제거

✅ 중복 방지 (DRY):

중복 로직 → 함수나 컴포넌트로 추출

✅ 가드레일:

테스트 외에는 실제 데이터를 사용 금지

가짜 데이터는 프로덕션에서 절대 사용 금지

✅ 효율성:

코드 명확성을 해치지 않는 선에서 성능 최적화

불필요한 상태 업데이트, 리렌더링 방지

🔥 3. 리팩토링
✅ 계획 후 진행:

리팩토링 계획 → 설명 및 승인 후 진행

기능 변경 없이 코드 구조 개선에 초점

✅ 테스트 통과 필수:

리팩토링 후 기존 테스트가 모두 통과해야 함

🛠️ 4. 디버깅
✅ 원인 파악 → 해결책 제안:

문제 원인 → 해결책 설명 후 수정 진행

해결책보다 문제 원인 파악이 중요

✅ 상세 로그 추가:

원인이 불분명할 경우 상세한 로그 추가

🌍 5. 언어
✅ 한국어로 소통:

문서, 주석, 코드 설명 모두 한국어 사용

라이브러리 이름, 기술 용어는 원어 유지

🌳 6. Git 커밋
✅ 명확한 커밋 메시지 작성:

feat:, fix:, refactor: 등 명확한 prefix 사용

--no-verify 절대 금지

하나의 커밋은 하나의 작업에 집중

📝 7. 문서화
✅ 간결한 요약:

주요 컴포넌트 개발 후 /docs/[component].md 작성

로직 복잡 시 주석 추가 (why 설명)

✅ API 문서 작성:

목적, 파라미터, 리턴 값, 예제 포함

예상 오류 및 처리 방법 명시

⚙️ 8. 코드 스타일
✅ 함수형 프로그래밍 선호:

클래스보다 함수형 컴포넌트 사용

선언형 JSX 우선

✅ 파일 구성 순서:

exports → subcomponents → helpers → types 순서로 정리

✅ 이름 규칙:

상태 변수는 isLoading, hasError 같은 상태 명명법 사용

디렉토리는 kebab-case로 작성 (components/auth-wizard)

✅ RORO 패턴 적용:

인수는 객체로 받고 반환값도 객체로 리턴

🧪 9. JavaScript/TypeScript
✅ TypeScript 적용:

interface 우선 사용

type은 유니온 타입, 매핑 등 복합적인 경우 사용

enum 대신 map 우선 사용

✅ 조건문 최소화:

단일 if 문 사용

불필요한 else 문 제거

early return 방식 적용

✅ 에러 핸들링:

try/catch는 최소화 → 오류는 값으로 반환

🪶 10. React 패턴
✅ 함수형 컴포넌트:

선언형 JSX 적용

화살표 함수보다 함수 선언 선호

✅ 서버 컴포넌트 우선 사용:

use client는 최소한으로 사용

✅ 상태 관리:

Zustand, React Query 등 사용

불필요한 상태 업데이트 방지

✅ 에러 바운더리:

error.tsx, global-error.tsx에서 처리

🌐 11. 상태 관리 및 서버 통신
✅ React Query 적용:

캐싱 및 상태 자동 관리

prefetching 적극 사용

✅ Zod와 React Hook Form 통합:

@hookform/resolvers/zod 사용

FormProvider 적용

✅ 서버 액션:

next-safe-action으로 타입 세이프 적용

📂 12. 아키텍처 (FSD - Feature Sliced Design)
✅ Layer 구조:

app/ → 설정

views/ → 라우팅

widgets/ → 독립 컴포넌트

features/ → 상호작용

entities/ → 비즈니스 로직

shared/ → 공통 모듈

✅ 의존성 규칙:

하위 → 상위 계층으로 의존성 X

같은 레이어에서만 의존성 허용

✅ 모듈 분리:

ui/, model/, lib/로 기능 모듈화

🌊 13. 성능 및 접근성
✅ 모바일 우선 설계:

반응형 Tailwind 적용

lazy loading 및 WebP 포맷 우선 사용

✅ 접근성 확보:

ARIA 속성 명확히 설정

포커스 처리 및 키보드 접근성 보장

✅ 리렌더링 방지:

불필요한 상태 업데이트 방지

useMemo, useCallback 사용

🌟 14. AI 상호작용 스타일
✅ 명확하고 간결한 응답:

불필요한 설명 없이 핵심 답변 우선

TypeScript 예제 포함

✅ 계획 단계 명확화:

문제 이해 → 요구사항 분석

기존 코드 구조 파악

솔루션 제안 및 코드 예제 제공

성능, 유지보수성, 확장성 고려

✅ 리소스 제공:

공식 문서 우선 참조

최신 리소스 및 레퍼런스 제공

